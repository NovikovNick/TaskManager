/*
 * This file is generated by jOOQ.
 */
package com.metalheart.model.jooq.tables;


import com.metalheart.model.jooq.Indexes;
import com.metalheart.model.jooq.Keys;
import com.metalheart.model.jooq.Public;
import com.metalheart.model.jooq.tables.records.RunningListArchiveRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunningListArchive extends TableImpl<RunningListArchiveRecord> {

    private static final long serialVersionUID = -265421771;

    /**
     * The reference instance of <code>public.running_list_archive</code>
     */
    public static final RunningListArchive RUNNING_LIST_ARCHIVE = new RunningListArchive();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunningListArchiveRecord> getRecordType() {
        return RunningListArchiveRecord.class;
    }

    /**
     * The column <code>public.running_list_archive.year</code>.
     */
    public final TableField<RunningListArchiveRecord, Integer> YEAR = createField("year", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.running_list_archive.week</code>.
     */
    public final TableField<RunningListArchiveRecord, Integer> WEEK = createField("week", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.running_list_archive.archive</code>.
     */
    public final TableField<RunningListArchiveRecord, String> ARCHIVE = createField("archive", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.running_list_archive</code> table reference
     */
    public RunningListArchive() {
        this(DSL.name("running_list_archive"), null);
    }

    /**
     * Create an aliased <code>public.running_list_archive</code> table reference
     */
    public RunningListArchive(String alias) {
        this(DSL.name(alias), RUNNING_LIST_ARCHIVE);
    }

    /**
     * Create an aliased <code>public.running_list_archive</code> table reference
     */
    public RunningListArchive(Name alias) {
        this(alias, RUNNING_LIST_ARCHIVE);
    }

    private RunningListArchive(Name alias, Table<RunningListArchiveRecord> aliased) {
        this(alias, aliased, null);
    }

    private RunningListArchive(Name alias, Table<RunningListArchiveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RunningListArchive(Table<O> child, ForeignKey<O, RunningListArchiveRecord> key) {
        super(child, key, RUNNING_LIST_ARCHIVE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RUNNING_LIST_ARCHIVE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RunningListArchiveRecord> getPrimaryKey() {
        return Keys.RUNNING_LIST_ARCHIVE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RunningListArchiveRecord>> getKeys() {
        return Arrays.<UniqueKey<RunningListArchiveRecord>>asList(Keys.RUNNING_LIST_ARCHIVE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RunningListArchive as(String alias) {
        return new RunningListArchive(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RunningListArchive as(Name alias) {
        return new RunningListArchive(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RunningListArchive rename(String name) {
        return new RunningListArchive(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RunningListArchive rename(Name name) {
        return new RunningListArchive(name, null);
    }
}
